package com.aralink.sslsignature.sso.jwt.test;


import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.impl.crypto.MacProvider;

import java.security.Key;
import java.util.HashMap;
import java.util.Map;







import org.junit.After;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.aralink.sslsignature.sso.jwt.JWTManager;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;


public class JWTTest {
	RestClient client;
	
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {

	}

	@Before
	public void setUp() throws Exception {
		client = new RestClient("https://pfb.sslsignature.com");
	}

	@After
	public void tearDown() throws Exception {
	}


	@Test
	public void issueAndValidateJWT() throws Exception {
		Map<String,String> jwtInfo = new HashMap<String,String>();
		jwtInfo.put("sub", "theSub");
		jwtInfo.put("eidentifier", "theEidentifier");
		jwtInfo.put("name", "theName");
		jwtInfo.put("phone", "thePhone");
		jwtInfo.put("other", "theOther");
		
		//REquest a new JWT to server
		String jwt = client.postForm("/sso/jwt", jwtInfo);
		SimpleConsoleLogger.info(jwt);
		Assert.assertNotNull(jwt);
		
		//Validate the token signature
		Map<String,String> jwtValidationInfo = new HashMap<String,String>();
		jwtValidationInfo.put("jwt", jwt);
		String authenticationResponseJson = client.postForm("/sso/jwt", jwtValidationInfo);
		SimpleConsoleLogger.info(authenticationResponseJson);
		
		//JWT token validated on server to Java Object 
		Map<String, Object> map = new HashMap<String, Object>();
		ObjectMapper mapper = new ObjectMapper();
		map = mapper.readValue(authenticationResponseJson, new TypeReference<Map<String, String>>(){});
		
		SimpleConsoleLogger.info("STATUS: "+map.get("status")+ " eidentifier"+ map.get("eidentifier"));
		
		Assert.assertEquals("SUCCESS", map.get("status"));
				
	}
	
	@Test
	public void alteredJWT() throws Exception {
		Map<String,String> jwtInfo = new HashMap<String,String>();
		jwtInfo.put("sub", "theSub");
		jwtInfo.put("eidentifier", "theEidentifier");
		jwtInfo.put("name", "theName");
		jwtInfo.put("phone", "thePhone");
		jwtInfo.put("other", "theOther");
		
		//REquest a new JWT to server
		String jwt = client.postForm("/sso/jwt", jwtInfo);
		SimpleConsoleLogger.info(jwt);
		Assert.assertNotNull(jwt);
		
		//Signature modified
		jwt = jwt + "XXX";
		
		//Validate the token signature
		Map<String,String> jwtValidationInfo = new HashMap<String,String>();
		jwtValidationInfo.put("jwt", jwt);
		String authenticationResponseJson = client.postForm("/sso/jwt", jwtValidationInfo);
		SimpleConsoleLogger.info(authenticationResponseJson);
		
		//JWT token validated on server to Java Object 
		Map<String, Object> map = new HashMap<String, Object>();
		ObjectMapper mapper = new ObjectMapper();
		map = mapper.readValue(authenticationResponseJson, new TypeReference<Map<String, String>>(){});
		
		SimpleConsoleLogger.info("STATUS: "+map.get("status")+ " eidentifier"+ map.get("eidentifier"));
		
		Assert.assertEquals("FAIL", map.get("status"));
				
	}
	
	@Test
	public void fakeJWT() throws Exception {
		//Create a token with a key autogenerated (not server key)
		Key key = MacProvider.generateKey(JWTManager.DEFAULT_HMAC_KEY_ALGORITHM);
		String jwt =  Jwts.builder()
				.setSubject("fake")
				.signWith(JWTManager.DEFAULT_HMAC_SIGNATURE_ALGORITHM, key).compact();
		
		//Validate token		
		Map<String,String> jwtValidationInfo = new HashMap<String,String>();
		jwtValidationInfo.put("jwt", jwt);
		String authenticationResponseJson = client.postForm("/sso/jwt", jwtValidationInfo);
		SimpleConsoleLogger.info(authenticationResponseJson);
		
		
		//JWT token validated on server to Java Object 
		Map<String, Object> map = new HashMap<String, Object>();
		ObjectMapper mapper = new ObjectMapper();
		map = mapper.readValue(authenticationResponseJson, new TypeReference<Map<String, String>>(){});
		
		SimpleConsoleLogger.info("STATUS: "+map.get("status")+ " eidentifier"+ map.get("eidentifier"));
		
		Assert.assertEquals("FAIL", map.get("status"));
	}
}
